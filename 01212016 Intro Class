@@ -0,0 +1,860 @@
{
 "metadata": {
  "name": "",
  "signature": "sha256:b1f8d2b6615b99859d10db7461e6cb958c6f71fe89ce92c5c24827db7aab5e29"
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "heading",
     "level": 1,
     "metadata": {},
     "source": [
      "Introduction to iPython"
     ]
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {},
     "source": [
      "Do some simple math. Add and multiply some numbers."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print(2+56+84+65498+21+22)\n",
      "print(2**16)\n",
      "print((1+4)*(9-6))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "65683\n",
        "65536\n",
        "15\n"
       ]
      }
     ],
     "prompt_number": 1
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {},
     "source": [
      "Characters"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s = 'spam'\n",
      "print(s[0], s[-2])\n",
      "print(s[1:3], s[1:], s[:-1])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "s a\n",
        "pa pam spa\n"
       ]
      }
     ],
     "prompt_number": 7
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {},
     "source": [
      "Check current working directory"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import sys #Load the sys library\n",
      "import os #Load the os library\n",
      "import re #Load regular expression pattern matching library\n",
      "print(os.getcwd())\n",
      "print(sys.platform)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "/Users/gs13macpro/Box Sync/Gerhard Pilcher/Georgetown Univ/510 Course 2016 Spring/Python\n",
        "darwin\n"
       ]
      }
     ],
     "prompt_number": 2
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {},
     "source": [
      "Help"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "#help(os)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 9
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import urllib"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 3
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print(dir(urllib))\n",
      "help(urllib)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "['__builtins__', '__cached__', '__doc__', '__file__', '__initializing__', '__loader__', '__name__', '__package__', '__path__', 'error', 'parse', 'request', 'response']\n",
        "Help on package urllib:\n",
        "\n",
        "NAME\n",
        "    urllib\n",
        "\n",
        "MODULE REFERENCE\n",
        "    http://docs.python.org/3.3/library/urllib\n",
        "    \n",
        "    The following documentation is automatically generated from the Python\n",
        "    source files.  It may be incomplete, incorrect or include features that\n",
        "    are considered implementation detail and may vary between Python\n",
        "    implementations.  When in doubt, consult the module reference at the\n",
        "    location listed above.\n",
        "\n",
        "PACKAGE CONTENTS\n",
        "    error\n",
        "    parse\n",
        "    request\n",
        "    response\n",
        "    robotparser\n",
        "\n",
        "FILE\n",
        "    /Users/gs13macpro/anaconda/envs/py3k/lib/python3.3/urllib/__init__.py\n",
        "\n",
        "\n"
       ]
      }
     ],
     "prompt_number": 6
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import urllib\n",
      "r = urllib.urlopen('https://github.com/Math510/Math510.github.io/raw/master/2015%20FALL%20510%20Course%20Schedule.pdf')\n",
      "myfile = open('/Users/gerhardpilcher/Downloads/Schedule.pdf', 'wb')\n",
      "myfile.write(r.read())\n",
      "myfile.close()\n",
      "print(r.__class__)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "urllib.addinfourl\n"
       ]
      }
     ],
     "prompt_number": 15
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "r = urllib.request.urlopen('https://github.com/Math510/Math510.github.io/raw/master/2015%20FALL%20510%20Syllabus.pdf')\n",
      "myfile = open('<need to specify a location on your computer>', 'wb')\n",
      "myfile.write(r.read())\n",
      "myfile.close()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 16
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {},
     "source": [
      "Modules"
     ]
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Create a variable"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "title = 'Something Else'\n",
      "print(title)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Something Else\n"
       ]
      }
     ],
     "prompt_number": 7
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Import variables from a module"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import Class_1_Module #uses Class_1_Module name space\n",
      "dir(Class_1_Module)\n",
      "print(Class_1_Module.title)\n",
      "print(Class_1_Module.MyAge)\n",
      "\n",
      "print(title)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Math 510 Fall 2015\n",
        "54.0\n",
        "Something Else\n"
       ]
      }
     ],
     "prompt_number": 8
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {},
     "source": [
      "Show the difference in scope between importing a module and importing a specific variable from the module"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "#copies into local name space, overwrites same named variable\n",
      "#without warning\n",
      "from Class_1_Module import title \n",
      "print(title)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Math 510 Fall 2015\n"
       ]
      }
     ],
     "prompt_number": 4
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {},
     "source": [
      "Logic"
     ]
    },
    {
     "cell_type": "heading",
     "level": 1,
     "metadata": {},
     "source": [
      "if Statement"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "y = -4\n",
      "if y == 1:\n",
      "    print('y still equals 1, I was just checking')\n",
      "\n",
      "if y < 1:\n",
      "    print('What now?')\n",
      "\n",
      "if y <= 1:\n",
      "    print('Did this work?')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "What now?\n",
        "Did this work?\n"
       ]
      }
     ],
     "prompt_number": 10
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {},
     "source": [
      "if-else Statement"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "a = 1\n",
      "if a > 5:\n",
      "    print(\"This shouldn't happen.\")\n",
      "else:\n",
      "    print(\"This should happen.\")\n",
      "    \n",
      "if a > 5:\n",
      "    print(\"Big number!\")\n",
      "elif a % 2 != 0:\n",
      "    print(\"This is an odd number\")\n",
      "    print(\"It isn't greater than five, either\")\n",
      "else:\n",
      "    print(\"this number isn't greater than 5\")\n",
      "    print(\"nor is it odd\")\n",
      "    print(\"feeling special?\")\n",
      "\n"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "This should happen.\n",
        "This is an odd number\n",
        "It isn't greater than five, either\n"
       ]
      }
     ],
     "prompt_number": 9
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {},
     "source": [
      "FOR Loops"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "list = [2, 4, 6, 8]\n",
      "sum = 0\n",
      "for num in list:\n",
      "    print(sum)\n",
      "    sum = sum + num\n",
      "    print(sum)\n",
      "    \n",
      "print(\"The sum is:\", sum)\n",
      "\n",
      "\n",
      "# What is the result if a=10, a=3, a=4?\n",
      "a = [1,10,3,4]\n",
      "\n",
      "for num in a:\n",
      "    if num > 5:\n",
      "        print(\"Big number!\")\n",
      "    elif num % 2 != 0:\n",
      "        print(\"This is an odd number\")\n",
      "        print(\"It isn't greater than five, either\")\n",
      "    else:\n",
      "        print(\"this number isn't greater than 5\")\n",
      "        print(\"nor is it odd\")\n",
      "        print(\"feeling special?\")\n",
      "\n"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "0\n",
        "2\n",
        "2\n",
        "6\n",
        "6\n",
        "12\n",
        "12\n",
        "20\n",
        "The sum is: 20\n",
        "This is an odd number\n",
        "It isn't greater than five, either\n",
        "Big number!\n",
        "This is an odd number\n",
        "It isn't greater than five, either\n",
        "this number isn't greater than 5\n",
        "nor is it odd\n",
        "feeling special?\n"
       ]
      }
     ],
     "prompt_number": 13
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {},
     "source": [
      "WHILE loops"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "a = 0\n",
      "while a < 10:\n",
      "    a = a + 1\n",
      "    print(a)\n",
      "    \n",
      "x = 10\n",
      "while x != 0:\n",
      "    print(x)\n",
      "    x = x - 1\n",
      "    print(\"wow, we've counted x down, and now it equals\", x)\n",
      "print(\"And now the loop has ended.\")\n",
      "\n"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "1\n",
        "2\n",
        "3\n",
        "4\n",
        "5\n",
        "6\n",
        "7\n",
        "8\n",
        "9\n",
        "10\n",
        "10\n",
        "wow, we've counted x down, and now it equals 9\n",
        "9\n",
        "wow, we've counted x down, and now it equals 8\n",
        "8\n",
        "wow, we've counted x down, and now it equals 7\n",
        "7\n",
        "wow, we've counted x down, and now it equals 6\n",
        "6\n",
        "wow, we've counted x down, and now it equals 5\n",
        "5\n",
        "wow, we've counted x down, and now it equals 4\n",
        "4\n",
        "wow, we've counted x down, and now it equals 3\n",
        "3\n",
        "wow, we've counted x down, and now it equals 2\n",
        "2\n",
        "wow, we've counted x down, and now it equals 1\n",
        "1\n",
        "wow, we've counted x down, and now it equals 0\n",
        "And now the loop has ended.\n"
       ]
      }
     ],
     "prompt_number": 15
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "number = 23\n",
      "guess = 21\n",
      "if guess == number:\n",
      "    # New block starts here\n",
      "    print('Congratulations, you guessed it.')\n",
      "    print('(but you do not win any prizes!)')\n",
      "    # New block ends here\n",
      "elif guess < number:\n",
      "    # Another block\n",
      "    print('No, it is a little higher than that')\n",
      "    # You can do whatever you want in a block ...\n",
      "else:print('No, it is a little lower than that')\n",
      "    # you must have guessed > number to reach here\n",
      "\n",
      "print('Done')\n",
      "# This last statement is always executed,\n",
      "# after the if statement is executed.\n"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "No, it is a little higher than that\n",
        "Done\n"
       ]
      }
     ],
     "prompt_number": 2
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {},
     "source": [
      "System Stuff"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import sys #Load the sys library\n",
      "print(dir(sys))\n",
      "\n",
      "import os #Load the os library\n",
      "print(dir(os))\n",
      "print(os.getcwd())\n",
      "\n",
      "import re #Load regular expression pattern matching library\n",
      "print(dir(re))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "['__displayhook__', '__doc__', '__excepthook__', '__loader__', '__name__', '__package__', '__stderr__', '__stdin__', '__stdout__', '_clear_type_cache', '_current_frames', '_debugmallocstats', '_getframe', '_home', '_mercurial', '_xoptions', 'abiflags', 'api_version', 'argv', 'base_exec_prefix', 'base_prefix', 'builtin_module_names', 'byteorder', 'call_tracing', 'callstats', 'copyright', 'displayhook', 'dont_write_bytecode', 'exc_info', 'excepthook', 'exec_prefix', 'executable', 'exit', 'flags', 'float_info', 'float_repr_style', 'getcheckinterval', 'getdefaultencoding', 'getdlopenflags', 'getfilesystemencoding', 'getprofile', 'getrecursionlimit', 'getrefcount', 'getsizeof', 'getswitchinterval', 'gettrace', 'hash_info', 'hexversion', 'implementation', 'int_info', 'intern', 'last_traceback', 'last_type', 'last_value', 'maxsize', 'maxunicode', 'meta_path', 'modules', 'path', 'path_hooks', 'path_importer_cache', 'platform', 'prefix', 'ps1', 'ps2', 'ps3', 'setcheckinterval', 'setdlopenflags', 'setprofile', 'setrecursionlimit', 'setswitchinterval', 'settrace', 'stderr', 'stdin', 'stdout', 'thread_info', 'version', 'version_info', 'warnoptions']\n",
        "['CLD_CONTINUED', 'CLD_DUMPED', 'CLD_EXITED', 'CLD_TRAPPED', 'EX_CANTCREAT', 'EX_CONFIG', 'EX_DATAERR', 'EX_IOERR', 'EX_NOHOST', 'EX_NOINPUT', 'EX_NOPERM', 'EX_NOUSER', 'EX_OK', 'EX_OSERR', 'EX_OSFILE', 'EX_PROTOCOL', 'EX_SOFTWARE', 'EX_TEMPFAIL', 'EX_UNAVAILABLE', 'EX_USAGE', 'F_LOCK', 'F_OK', 'F_TEST', 'F_TLOCK', 'F_ULOCK', 'MutableMapping', 'NGROUPS_MAX', 'O_ACCMODE', 'O_APPEND', 'O_ASYNC', 'O_CREAT', 'O_DIRECTORY', 'O_EXCL', 'O_EXLOCK', 'O_NDELAY', 'O_NOCTTY', 'O_NOFOLLOW', 'O_NONBLOCK', 'O_RDONLY', 'O_RDWR', 'O_SHLOCK', 'O_SYNC', 'O_TRUNC', 'O_WRONLY', 'PRIO_PGRP', 'PRIO_PROCESS', 'PRIO_USER', 'P_ALL', 'P_NOWAIT', 'P_NOWAITO', 'P_PGID', 'P_PID', 'P_WAIT', 'RTLD_GLOBAL', 'RTLD_LAZY', 'RTLD_LOCAL', 'RTLD_NODELETE', 'RTLD_NOLOAD', 'RTLD_NOW', 'R_OK', 'SCHED_FIFO', 'SCHED_OTHER', 'SCHED_RR', 'SEEK_CUR', 'SEEK_END', 'SEEK_SET', 'ST_NOSUID', 'ST_RDONLY', 'TMP_MAX', 'WCONTINUED', 'WCOREDUMP', 'WEXITED', 'WEXITSTATUS', 'WIFCONTINUED', 'WIFEXITED', 'WIFSIGNALED', 'WIFSTOPPED', 'WNOHANG', 'WNOWAIT', 'WSTOPPED', 'WSTOPSIG', 'WTERMSIG', 'WUNTRACED', 'W_OK', 'X_OK', '_Environ', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__initializing__', '__loader__', '__name__', '__package__', '_copyreg', '_execvpe', '_exists', '_exit', '_get_exports_list', '_get_masked_mode', '_make_stat_result', '_make_statvfs_result', '_pickle_stat_result', '_pickle_statvfs_result', '_putenv', '_spawnvef', '_unsetenv', '_wrap_close', 'abort', 'access', 'altsep', 'chdir', 'chflags', 'chmod', 'chown', 'chroot', 'close', 'closerange', 'confstr', 'confstr_names', 'ctermid', 'curdir', 'defpath', 'device_encoding', 'devnull', 'dup', 'dup2', 'environ', 'environb', 'errno', 'error', 'execl', 'execle', 'execlp', 'execlpe', 'execv', 'execve', 'execvp', 'execvpe', 'extsep', 'fchdir', 'fchmod', 'fchown', 'fdopen', 'fork', 'forkpty', 'fpathconf', 'fsdecode', 'fsencode', 'fstat', 'fstatvfs', 'fsync', 'ftruncate', 'get_exec_path', 'get_terminal_size', 'getcwd', 'getcwdb', 'getegid', 'getenv', 'getenvb', 'geteuid', 'getgid', 'getgrouplist', 'getgroups', 'getloadavg', 'getlogin', 'getpgid', 'getpgrp', 'getpid', 'getppid', 'getpriority', 'getsid', 'getuid', 'initgroups', 'isatty', 'kill', 'killpg', 'lchflags', 'lchmod', 'lchown', 'linesep', 'link', 'listdir', 'lockf', 'lseek', 'lstat', 'major', 'makedev', 'makedirs', 'minor', 'mkdir', 'mkfifo', 'mknod', 'name', 'nice', 'open', 'openpty', 'pardir', 'path', 'pathconf', 'pathconf_names', 'pathsep', 'pipe', 'popen', 'pread', 'putenv', 'pwrite', 'read', 'readlink', 'readv', 'remove', 'removedirs', 'rename', 'renames', 'replace', 'rmdir', 'sched_get_priority_max', 'sched_get_priority_min', 'sched_yield', 'sendfile', 'sep', 'setegid', 'seteuid', 'setgid', 'setgroups', 'setpgid', 'setpgrp', 'setpriority', 'setregid', 'setreuid', 'setsid', 'setuid', 'spawnl', 'spawnle', 'spawnlp', 'spawnlpe', 'spawnv', 'spawnve', 'spawnvp', 'spawnvpe', 'st', 'stat', 'stat_float_times', 'stat_result', 'statvfs', 'statvfs_result', 'strerror', 'supports_bytes_environ', 'supports_dir_fd', 'supports_effective_ids', 'supports_fd', 'supports_follow_symlinks', 'symlink', 'sync', 'sys', 'sysconf', 'sysconf_names', 'system', 'tcgetpgrp', 'tcsetpgrp', 'terminal_size', 'times', 'times_result', 'truncate', 'ttyname', 'umask', 'uname', 'uname_result', 'unlink', 'unsetenv', 'urandom', 'utime', 'wait', 'wait3', 'wait4', 'waitpid', 'walk', 'write', 'writev']\n",
        "/Users/gs13macpro/Box Sync/Gerhard Pilcher/Georgetown Univ/510 Course 2015 Fall/Python\n",
        "['A', 'ASCII', 'DEBUG', 'DOTALL', 'I', 'IGNORECASE', 'L', 'LOCALE', 'M', 'MULTILINE', 'S', 'Scanner', 'T', 'TEMPLATE', 'U', 'UNICODE', 'VERBOSE', 'X', '_MAXCACHE', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__initializing__', '__loader__', '__name__', '__package__', '__version__', '_alphanum_bytes', '_alphanum_str', '_cache', '_cache_repl', '_compile', '_compile_repl', '_expand', '_pattern_type', '_pickle', '_subx', 'compile', 'copyreg', 'error', 'escape', 'findall', 'finditer', 'functools', 'match', 'purge', 'search', 'split', 'sre_compile', 'sre_parse', 'sub', 'subn', 'sys', 'template']\n"
       ]
      }
     ],
     "prompt_number": 19
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {},
     "source": [
      "Modules"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "title = 'Something Else'\n",
      "print(title)\n",
      "\n",
      "import Class_1_Module #uses Class_1_Module name space\n",
      "print(dir(Class_1_Module))\n",
      "print(Class_1_Module.title)\n",
      "print(Class_1_Module.MyAge)\n",
      "\n",
      "print(title)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Something Else\n",
        "['MyAge', '__builtins__', '__cached__', '__doc__', '__file__', '__initializing__', '__loader__', '__name__', '__package__', 'title']\n",
        "Math 510 Fall 2015\n",
        "54.0\n",
        "Something Else\n"
       ]
      }
     ],
     "prompt_number": 21
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "from Class_1_Module import title \n",
      "print(title)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Math 510 Fall 2015\n"
       ]
      }
     ],
     "prompt_number": 22
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {},
     "source": [
      "Functions"
     ]
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Documentation"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "#Calculates a total given parms.\n",
      "def total(initial=5, *numbers, **keywords):\n",
      "    \"\"\"\n",
      "    This is a function document string or doc string.\n",
      "    This functions totals stuff.\n",
      "\n",
      "    Parameters:\n",
      "    initial - initial value defaults to 5\n",
      "    *numbers - any number of numbers separated by commas\n",
      "    **keywords - any number of name=number pairs e.g. fruit=77\n",
      "\n",
      "    gp-2015\n",
      "    \"\"\"\n",
      "    count = initial\n",
      "    for number in numbers:\n",
      "        count += number #numbers stored in a tuple\n",
      "    for key in keywords:\n",
      "        count += keywords[key] #keywords stored in a dictionary\n",
      "    return count\n",
      "\n",
      "total_count = total(10, 1, 2, 3, vegetables=50, fruits=100)\n",
      "print (total_count)\n",
      "print ('\\n')\n",
      "print (total.__doc__)\n",
      "dir(total)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "166\n",
        "\n",
        "\n",
        "\n",
        "    This is a function document string or doc string.\n",
        "    This functions totals stuff.\n",
        "\n",
        "    Parameters:\n",
        "    initial - initial value defaults to 5\n",
        "    *numbers - any number of numbers separated by commas\n",
        "    **keywords - any number of name=number pairs e.g. fruit=77\n",
        "\n",
        "    gp-2015\n",
        "    \n"
       ]
      },
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 1,
       "text": [
        "['__call__',\n",
        " '__class__',\n",
        " '__closure__',\n",
        " '__code__',\n",
        " '__defaults__',\n",
        " '__delattr__',\n",
        " '__dict__',\n",
        " '__doc__',\n",
        " '__format__',\n",
        " '__get__',\n",
        " '__getattribute__',\n",
        " '__globals__',\n",
        " '__hash__',\n",
        " '__init__',\n",
        " '__module__',\n",
        " '__name__',\n",
        " '__new__',\n",
        " '__reduce__',\n",
        " '__reduce_ex__',\n",
        " '__repr__',\n",
        " '__setattr__',\n",
        " '__sizeof__',\n",
        " '__str__',\n",
        " '__subclasshook__',\n",
        " 'func_closure',\n",
        " 'func_code',\n",
        " 'func_defaults',\n",
        " 'func_dict',\n",
        " 'func_doc',\n",
        " 'func_globals',\n",
        " 'func_name']"
       ]
      }
     ],
     "prompt_number": 1
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "help(total)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Help on function total in module __main__:\n",
        "\n",
        "total(initial=5, *numbers, **keywords)\n",
        "    This is a function document string or doc string.\n",
        "    This functions totals stuff.\n",
        "    \n",
        "    Parameters:\n",
        "    initial - initial value defaults to 5\n",
        "    *numbers - any number of numbers separated by commas\n",
        "    **keywords - any number of name=number pairs e.g. fruit=77\n",
        "    \n",
        "    gp-2015\n",
        "\n"
       ]
      }
     ],
     "prompt_number": 2
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "#function\n",
      "def fib(n):\n",
      "    a, b = 0, 1\n",
      "    while a < n:\n",
      "        print(a, end=' ')\n",
      "        a, b = b, a+b\n",
      "    # print (a,b)\n",
      "    \n",
      "fib(500)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 "
       ]
      }
     ],
     "prompt_number": 37
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [],
     "language": "python",
     "metadata": {},
     "outputs": []
    }
   ],
   "metadata": {}
  }
 ]
} 
